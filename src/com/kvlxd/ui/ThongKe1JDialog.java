/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlxd.ui;

import com.kvlxd.dao.MatHangDAO;
import com.kvlxd.dao.ThongKeDAO;
import com.kvlxd.entity.HoaDonNhap;
import com.kvlxd.entity.MatHang;
import com.kvlxd.util.MsgBox;
import com.kvlxd.util.WFile;
import com.kvlxd.util.XDate;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author ADMIN
 */
public class ThongKe1JDialog extends javax.swing.JInternalFrame {

    /**
     * Creates new form ThongKe1JDialog
     *
     * @param tab
     */
    public ThongKe1JDialog(int tab) {
        initComponents();
        tabs.setSelectedIndex(tab);
        inits();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDT = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cboNam = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cboNamHT = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHaoHut = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        cboMatHang = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHangTon = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        lblQuy3 = new javax.swing.JLabel();
        lblNam3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblDT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tổng giá trị nhập", "Tổng giá trị xuất", "Doanh thu"
            }
        ));
        jScrollPane1.setViewportView(tblDT);

        jLabel1.setText("Năm");

        cboNam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboNam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboNamItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(293, 293, 293)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cboNam, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
        );

        tabs.addTab("Doanh thu", jPanel1);

        jLabel3.setText("Năm");

        cboNamHT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboNamHTItemStateChanged(evt);
            }
        });

        tblHaoHut.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Quý", "Mã mặt hàng", "Tên mặt hàng", "Số lượng", "Số lượng kiểm kê", "SL Tồn", "Số lượng hỏng", "Hao hụt"
            }
        ));
        jScrollPane2.setViewportView(tblHaoHut);

        jLabel5.setText("Mặt hàng");

        cboMatHang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboMatHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMatHangItemStateChanged(evt);
            }
        });

        jButton1.setText("Export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addComponent(cboMatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboNamHT, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cboNamHT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cboMatHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Thống kê hao hụt", jPanel2);

        tblHangTon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã mặt hàng", "Tên mặt hàng", "Số lượng nhập", "Số lượng xuất", "Số lượng hỏng", "Số lượng tồn kho"
            }
        ));
        jScrollPane3.setViewportView(tblHangTon);

        jLabel6.setText("Danh sách mặt hàng còn lại trong kho quý");

        lblQuy3.setText("quý");

        lblNam3.setText("Năm");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQuy3)
                .addGap(27, 27, 27)
                .addComponent(lblNam3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblQuy3)
                    .addComponent(lblNam3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Hàng tồn", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboNamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboNamItemStateChanged
        // TODO add your handling code here:
        if (cboNam.getSelectedIndex() >= 0) {
            loadDT();
        }
    }//GEN-LAST:event_cboNamItemStateChanged

    private void cboMatHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMatHangItemStateChanged
        // TODO add your handling code here:
        loadTblHaoHut();
    }//GEN-LAST:event_cboMatHangItemStateChanged

    private void cboNamHTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboNamHTItemStateChanged
        // TODO add your handling code here:
        loadTblHaoHut();
    }//GEN-LAST:event_cboNamHTItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:\
        ExportExcel(createNewFile());
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ThongKe1JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ThongKe1JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ThongKe1JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ThongKe1JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ThongKe1JDialog().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboMatHang;
    private javax.swing.JComboBox<String> cboNam;
    private javax.swing.JComboBox<String> cboNamHT;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblNam3;
    private javax.swing.JLabel lblQuy3;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblDT;
    private javax.swing.JTable tblHangTon;
    private javax.swing.JTable tblHaoHut;
    // End of variables declaration//GEN-END:variables

    private int[] QuyRaThang(int q) {
        int[] thang = new int[2];
        switch (q) {
            case 1:
                thang[0] = 1;
                thang[1] = 3;
                break;
            case 2:
                thang[0] = 4;
                thang[1] = 6;
                break;
            case 3:
                thang[0] = 7;
                thang[1] = 9;
                break;
            case 4:
                thang[0] = 10;
                thang[1] = 12;
                break;
            default:
                thang[0] = 1;
                thang[1] = 12;
                break;
        }
        return thang;
    }
    List<Object[]> listNamThang = new ArrayList<>();
    ThongKeDAO daotk = new ThongKeDAO();
    MatHangDAO daomh = new MatHangDAO();

    private void inits() {
        loadCboNam();
        loadDT();
        loadCboMatHang();
        loadCboNamHT();
        loadTblHaoHut();
        loadTblHangTon();
    }

    private void loadCboNam() {
        listNamThang = daotk.NamThangDT();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboNam.getModel();
        model.removeAllElements();
        for (int i = 0; i < listNamThang.size(); i++) {
            model.addElement(listNamThang.get(i)[0] + " - " + listNamThang.get(i)[1]);
        }
    }

    private void loadDT() {
        DefaultTableModel model = (DefaultTableModel) tblDT.getModel();
        model.setRowCount(0);
        int r = cboNam.getSelectedIndex();
        if (r >= 0) {
            int y = Integer.parseInt(String.valueOf(listNamThang.get(r)[0]));
            int m = Integer.parseInt(String.valueOf(listNamThang.get(r)[1]));
            List<Object[]> listDT = new ArrayList<>();
            try {
                listDT = daotk.DoanhThu(y, m);
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (listDT.get(0)[0] != null) {
                for (int i = 0; i < listDT.size(); i++) {
                    double x = Double.valueOf(String.valueOf(listDT.get(i)[0]));
                    double n = Double.valueOf(String.valueOf(listDT.get(i)[1]));
                    model.addRow(new Object[]{doiTien(n), doiTien(x), doiTien(x - n)});
                }
            }
        }

    }

    private String doiTien(Object ob) {
        DecimalFormat fm = new DecimalFormat("#");
        Locale localeVN = new Locale("vi", "VN");
        NumberFormat currencyVN = NumberFormat.getCurrencyInstance(localeVN);
        return currencyVN.format(Double.parseDouble(String.valueOf(ob)));
    }

    private void loadCboMatHang() {
        List<MatHang> listMH = daomh.selectKiemKe();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMatHang.getModel();
        model.removeAllElements();
        for (MatHang mh : listMH) {
            model.addElement(mh);
        }
    }

    private void loadCboNamHT() {
        List<Object> nam = daotk.NamHT();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboNamHT.getModel();
        model.removeAllElements();
        for (int i = 0; i < nam.size(); i++) {
            model.addElement(nam.get(i));
        }
    }
//
//    private void loadCboQuyHT() {
//        DefaultComboBoxModel model = (DefaultComboBoxModel) cboQuyHT.getModel();
//        model.removeAllElements();
//        for (int i = 0; i < 4; i++) {
//            model.addElement(i + 1);
//        }
//    }

    private void loadTblHaoHut() {
        DefaultTableModel model = (DefaultTableModel) tblHaoHut.getModel();
        model.setRowCount(0);
        MatHang mh = new MatHang();
        int year = 0, quy = 0;
        if (cboMatHang.getSelectedIndex() >= 0) {
            mh = (MatHang) cboMatHang.getSelectedItem();
        }
        if (cboNamHT.getSelectedIndex() >= 0) {
            year = Integer.parseInt(String.valueOf(cboNamHT.getSelectedItem()));
        }
        List<Object[]> listHH = daotk.HaoHut(mh.getMaMH(), year);

        for (int i = 0; i < listHH.size(); i++) {
            Object[] o = listHH.get(i);
            model.addRow(new Object[]{ThangRaQuy(Integer.parseInt(String.valueOf(o[0]))), o[1], o[2], o[3], o[4], o[5] == null ? 0 : o[5], o[6], o[7]});
        }
    }

    private void loadTblHangTon() {
        DefaultTableModel model = (DefaultTableModel) tblHangTon.getModel();
        model.setRowCount(0);
        int y = XDate.now().getYear() + 1900;
        int m = XDate.now().getMonth();
        int q = ThangRaQuy(m);
        if (q == 1) {
            q = 4;
            --y;
        } else {
            --q;
        }
        lblNam3.setText("Năm :" + y);
        lblQuy3.setText(String.valueOf(q));

        List<Object[]> listHT = daotk.HangTonKho(y, QuyRaThang(q));
        for (int i = 0; i < listHT.size(); i++) {
            model.addRow(listHT.get(i));
        }
    }

    private int ThangRaQuy(int m) {
        if (m < 4) {
            return 1;
        } else if (m < 7) {
            return 2;
        } else if (m < 10) {
            return 3;
        } else {
            return 4;
        }
    }

    private File createNewFile() {
        String date = XDate.toString(XDate.now(), "yyyy-MM-dd");
        String fn = "TKHH_Nam" + cboNamHT.getSelectedItem() + "_" + cboMatHang.getSelectedItem() + "_" + date + ".xlsx";
        File excelExport = new File("C:\\Users\\ADMIN\\Desktop\\ReportHaoHut\\" + fn);
        File exportEx = new File("C:\\Users\\ADMIN\\Desktop\\ReportHaoHut\\Report_Mau.xlsx");
        try {
            WFile.copyFile(exportEx, excelExport);
            return excelExport;
        } catch (IOException ex) {
            throw new RuntimeException();
        }
    }

    private void ExportExcel(File file) {
        FileOutputStream fos = null;
        BufferedOutputStream bou = null;
        XSSFWorkbook excelJtableExport = null;
        DefaultTableModel model = (DefaultTableModel) tblHaoHut.getModel();
        try {
            XSSFRow excelRow;
            XSSFCell excelCell = null;
            try {
                excelJtableExport = new XSSFWorkbook(file);
            } catch (InvalidFormatException ex) {
                ex.printStackTrace();
            }

            XSSFSheet excelSheet = excelJtableExport.getSheet("Sheet1");

            for (int i = 0; i < model.getRowCount(); i++) {
                int currentRow = i + 2;
                excelRow = excelSheet.getRow(currentRow);
                excelCell = excelRow.createCell(1);
                excelCell.setCellValue(Integer.parseInt(model.getValueAt(i, 0).toString()));
                excelCell = excelRow.createCell(2);
                excelCell.setCellValue(Double.parseDouble(model.getValueAt(i, 3).toString()));
                excelCell = excelRow.createCell(3);
                excelCell.setCellValue(Double.parseDouble(model.getValueAt(i, 4).toString()));
                excelCell = excelRow.createCell(4);
                excelCell.setCellValue(Double.parseDouble(model.getValueAt(i, 5).toString()));
                excelCell = excelRow.createCell(5);
                excelCell.setCellValue(Double.parseDouble(model.getValueAt(i, 6).toString()));
                excelCell = excelRow.createCell(6);
                excelCell.setCellValue(Double.parseDouble(model.getValueAt(i, 7).toString()));
            }

            excelRow = excelSheet.getRow(0);
            excelCell = excelRow.createCell(0);
            excelCell.setCellValue(cboMatHang.getSelectedItem().toString());

            excelRow = excelSheet.getRow(2);
            excelCell = excelRow.createCell(0);
            excelCell.setCellValue(String.valueOf(cboNamHT.getSelectedItem()));

            fos = new FileOutputStream(file.getName());
            bou = new BufferedOutputStream(fos);
            excelJtableExport.write(bou);

            MsgBox.alert(this, "Export ok");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(HoaDonNhap.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (bou != null) {
                    bou.close();
                }
                if (fos != null) {
                    fos.close();
                }
                if (excelJtableExport != null) {
                    excelJtableExport.close();
                }

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
}
