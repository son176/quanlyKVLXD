/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlxd.ui;

import com.kvlxd.dao.KeHangDAO;
import com.kvlxd.dao.KhoDAO;
import com.kvlxd.dao.LoaiHangDAO;
import com.kvlxd.dao.MatHangDAO;
import com.kvlxd.entity.KeHang;
import com.kvlxd.entity.Kho;
import com.kvlxd.entity.LoaiHang;
import com.kvlxd.entity.MatHang;
import com.kvlxd.util.Auth;
import com.kvlxd.util.CheckData;
import com.kvlxd.util.MsgBox;
import com.kvlxd.util.XDate;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author cuong
 */
public class MatHangJDialog extends javax.swing.JInternalFrame {

    /**
     * Creates new form MatHangJDialog
     */
    public MatHangJDialog() {
        initComponents();
        inits();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtTKTenMH = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatHang = new javax.swing.JTable();
        btnImport = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        lblTrang = new javax.swing.JLabel();
        btnNexxt = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        lblSotrang = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtMaMH = new javax.swing.JTextField();
        txtTenMatHang = new javax.swing.JTextField();
        txtDonGia = new javax.swing.JTextField();
        cbbDonVi = new javax.swing.JComboBox<>();
        txtSL = new javax.swing.JTextField();
        txtHang = new javax.swing.JTextField();
        txtNgaySX = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtSLHong = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cbbKe = new javax.swing.JComboBox<>();
        cbbTenLH = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbbKho = new javax.swing.JComboBox<>();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        tabs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Tìm kiếm theo tên mặt hàng");

        txtTKTenMH.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTKTenMH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTKTenMHActionPerformed(evt);
            }
        });
        txtTKTenMH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTKTenMHKeyPressed(evt);
            }
        });

        tblMatHang.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblMatHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã MH", "Tên mặt hàng", "Mã LH", "Đơn giá", "Đơn vị", "Số lượng", "Hãng", "Ngày sản xuất", "Kệ", "SL hỏng"
            }
        ));
        tblMatHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMatHangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMatHang);

        btnImport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnLast.setText("|<");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        lblTrang.setText("jLabel13");

        btnNexxt.setText(">>");
        btnNexxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNexxtActionPerformed(evt);
            }
        });

        btnFirst.setText(">|");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        lblSotrang.setText("jLabel13");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(txtTKTenMH, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(255, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnLast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPrev)
                        .addGap(38, 38, 38)
                        .addComponent(lblTrang)
                        .addGap(46, 46, 46)
                        .addComponent(btnNexxt)
                        .addGap(18, 18, 18)
                        .addComponent(btnFirst)
                        .addGap(18, 18, 18)
                        .addComponent(lblSotrang)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtTKTenMH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLast)
                        .addComponent(btnPrev)
                        .addComponent(btnFirst)
                        .addComponent(btnNexxt)
                        .addComponent(lblTrang)
                        .addComponent(lblSotrang))
                    .addComponent(btnImport))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        tabs.addTab("Danh sách mặt hàng", jPanel2);

        jPanel1.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mã MH");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Tên mặt hàng");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Đơn giá");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Đơn vị");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Tên loại hàng");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Số lượng");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Hãng");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Ngày sản xuất");

        txtMaMH.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtTenMatHang.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTenMatHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenMatHangActionPerformed(evt);
            }
        });

        txtDonGia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cbbDonVi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbDonVi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtSL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSL.setText("0");
        txtSL.setEnabled(false);

        txtHang.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtNgaySX.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnThem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnMoi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("SL hỏng");

        txtSLHong.setEditable(false);
        txtSLHong.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSLHong.setText("0");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Kệ");

        cbbKe.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbKe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbbTenLH.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbTenLH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Thuộc tính chi tiết");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addComponent(cbbKe, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtMaMH)
                                    .addComponent(txtTenMatHang)
                                    .addComponent(txtDonGia)
                                    .addComponent(cbbDonVi, 0, 354, Short.MAX_VALUE)
                                    .addComponent(cbbTenLH, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSLHong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNgaySX, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(188, Short.MAX_VALUE)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButton1)
                .addGap(126, 126, 126))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(txtMaMH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3))
                                    .addComponent(txtTenMatHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addComponent(cbbDonVi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbbTenLH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(cbbKe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSLHong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNgaySX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        tabs.addTab("Thông tin chi tiết", jPanel1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Kho");

        cbbKho.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbKho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbbKho.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbKhoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addComponent(jLabel1)
                .addGap(52, 52, 52)
                .addComponent(cbbKho, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbKho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabs))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTenMatHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenMatHangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenMatHangActionPerformed

    private void cbbKhoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbKhoItemStateChanged
        // TODO add your handling code here:
        if (cbbKho.getSelectedIndex() >= 0) {
            updateSoTrang();
            trang = 1;
            Kho k = (Kho) cbbKho.getSelectedItem();
            String maK = k.getMaKho();
            Filltop5MH(trang, maK);
        }
        this.loadCbbKe();


    }//GEN-LAST:event_cbbKhoItemStateChanged

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        this.insertForm();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        this.updateForm();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        this.deleteForm();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        this.clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void tblMatHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMatHangMouseClicked
        row = tblMatHang.getSelectedRow();
        this.edit();
    }//GEN-LAST:event_tblMatHangMouseClicked

    private void txtTKTenMHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTKTenMHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTKTenMHActionPerformed

    private void txtTKTenMHKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTKTenMHKeyPressed
        // TODO add your handling code here:
        try {
            fillTable(dao.SearchByTenMH(txtTKTenMH.getText()));
        } catch (Exception e) {
            DefaultTableModel model = (DefaultTableModel) tblMatHang.getModel();
            model.setRowCount(0);
        }
    }//GEN-LAST:event_txtTKTenMHKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JDesktopPane JDes = this.getDesktopPane();
        if (Auth.isLogin()) {
            MatHang mh = dao.selectById(txtMaMH.getText());
            if (mh != null) {
                ThuocTinhJDialog lh = new ThuocTinhJDialog(mh);
                lh.setTitle("Quản lý thuộc tính");
                lh.setLocation(480, 100);
                JDes.add(lh);
                lh.setVisible(true);
            } else {
                MsgBox.alert(this, "Bạn chưa chọn mặt hàng để hiển thị thuộc tính");
            }
        } else {
            MsgBox.alert(this, "Bạn phải đăng nhập");
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        importExcel();
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        openLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        openPrev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNexxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNexxtActionPerformed
        openNext();
    }//GEN-LAST:event_btnNexxtActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        openFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        updateSoTrang();
    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNexxt;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbbDonVi;
    private javax.swing.JComboBox<String> cbbKe;
    private javax.swing.JComboBox<String> cbbKho;
    private javax.swing.JComboBox<String> cbbTenLH;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSotrang;
    private javax.swing.JLabel lblTrang;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblMatHang;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtHang;
    private javax.swing.JTextField txtMaMH;
    private javax.swing.JTextField txtNgaySX;
    private javax.swing.JTextField txtSL;
    private javax.swing.JTextField txtSLHong;
    private javax.swing.JTextField txtTKTenMH;
    private javax.swing.JTextField txtTenMatHang;
    // End of variables declaration//GEN-END:variables
    int row = 0;
    MatHangDAO dao = new MatHangDAO();
    LoaiHangDAO lhdao = new LoaiHangDAO();
    KeHangDAO kdao = new KeHangDAO();
    KhoDAO khodao = new KhoDAO();
    List<MatHang> lstMH = new ArrayList<>();
    long trang, soTrang = 0;

    private void inits() {
        AutoCompleteDecorator.decorate(cbbTenLH);
        AutoCompleteDecorator.decorate(cbbKe);
        AutoCompleteDecorator.decorate(cbbDonVi);
        AutoCompleteDecorator.decorate(cbbKho);
        loadCbbKho();
        loadCbbDV();
        loadCbbKe();
        loadCbbLoaiHang();
        fillTable(ListMathangFull());
        row = -1;
        updateStatus();

    }

    private void Filltop5MH(long soTrang, String MaKho) {
        List<MatHang> lstTop5MH = dao.selectTop5MatHang(soTrang, MaKho);
        fillTable(lstTop5MH);
    }

    private void clearForm() {
        txtMaMH.setText("");
        txtTenMatHang.setText("");
        txtDonGia.setText("");
        txtHang.setText("");
        txtNgaySX.setText("");
        txtSL.setText("0");
        txtSLHong.setText("0");
        cbbKe.setSelectedIndex(0);
        cbbDonVi.setSelectedIndex(0);
        this.row = -1;
        updateStatus();
    }

    private void updateForm() {
        String err = check("Sua");
        if (err.equals("")) {
            MatHang mh = getForm();
            try {

                dao.update(mh);
                fillTable(ListMathang());
                clearForm();
                tabs.setSelectedIndex(1);
                MsgBox.alert(this, "Cập nhật thành công");
            } catch (Exception e) {
                e.printStackTrace();
                MsgBox.alert(this, "Cập nhập thất bại");
            }
        } else {
            MsgBox.alert(this, err);
        }
    }

    private void insertForm() {
        String err = check("Them");
        if (err.equals("")) {
            MatHang mh = getForm();
            try {
                dao.insert(mh);
                fillTable(ListMathang());
                clearForm();
                MsgBox.alert(this, "Thêm thành công");
            } catch (Exception e) {
                e.printStackTrace();
                MsgBox.alert(this, "Thêm thất bại");
            }
        } else {
            MsgBox.alert(this, err);
        }
    }

    private void deleteForm() {
        if (!Auth.isManager()) {
            MsgBox.alert(this, "Bạn không có quyển xóa");
        } else {
            String mamh = txtMaMH.getText();
            if (MsgBox.confirm(this, "Bạn có muốn xóa mặt hàng này ")) {
                try {
                    dao.delete(mamh);
                    fillTable(ListMathang());
                    clearForm();
                    MsgBox.alert(this, "Xóa thành công");
                } catch (Exception e) {
                    MsgBox.alert(this, "Xóa thất bại");
                    e.printStackTrace();
                }
            }
        }
    }

    MatHang getForm() {
        MatHang mh = new MatHang();
        mh.setMaMH(txtMaMH.getText());
        LoaiHang lh = (LoaiHang) cbbTenLH.getSelectedItem();
        mh.setMaLH(lh.getMaLH());
        KeHang k = (KeHang) cbbKe.getSelectedItem();
        mh.setMaKe(k.getMaKe());
        mh.setDonGia(Double.parseDouble(txtDonGia.getText()));
        mh.setDonVi(String.valueOf(cbbDonVi.getSelectedItem()));
        mh.setTenMH(txtTenMatHang.getText());
        mh.setSLHong(Double.parseDouble(txtSLHong.getText()));
        mh.setNgaySanXuat(new java.sql.Date(XDate.toDate(txtNgaySX.getText(), "yyyy-MM-dd").getTime()));
        mh.setHang(txtHang.getText());
        return mh;
    }

    void setForm(MatHang mh) {
        txtMaMH.setText(mh.getMaMH());
        txtTenMatHang.setText(mh.getTenMH());
        txtDonGia.setText(String.valueOf(mh.getDonGia()));
        cbbDonVi.setSelectedItem(mh.getDonVi());

        LoaiHang lh = lhdao.selectById(mh.getMaLH());

        cbbTenLH.setSelectedItem(lh);

        cbbKe.setSelectedItem(mh.getMaKe());
        txtSL.setText(String.valueOf(mh.getSoLuong()));
        txtSLHong.setText(String.valueOf(mh.getSLHong()));
        txtHang.setText(mh.getHang());
        txtNgaySX.setText(String.valueOf(mh.getNgaySanXuat()));
    }

    void updateStatus() {
        boolean edit = (this.row >= 0);
        //Trạng thái form
        txtMaMH.setEditable(!edit);
        btnThem.setEnabled(!edit);
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);
        //Trạng thái điều hướng
//        btnFirst.setEnabled(edit && !first);
//        btnPrev.setEnabled(edit && !first);
//        btnNext.setEnabled(edit && !last);
//        btnLast.setEnabled(edit && !last);

    }

    private List<MatHang> ListMathangFull() {

        try {

            List<MatHang> list = dao.selectAll();

            return list;
        } catch (Exception e) {
            MsgBox.alert(this, "lỗi truy vấn dữ liệu");
            throw new RuntimeException();
        }
    }

    private List<MatHang> ListMathang() {

        try {
            Kho kh = new Kho();
            if (cbbKho.getItemCount() != 0) {
                if (cbbKho.getSelectedIndex() != -1) {
                    kh = (Kho) cbbKho.getSelectedItem();
                } else {
                    return null;
                }
            } else {
                return null;
            }
            List<MatHang> list = dao.selectByMaKho(kh.getMaKho());
            return list;
        } catch (Exception e) {
            MsgBox.alert(this, "lỗi truy vấn dữ liệu");
            throw new RuntimeException();
        }
    }

    private void fillTable(List<MatHang> list) {
        DefaultTableModel model = (DefaultTableModel) tblMatHang.getModel();
        model.setRowCount(0);
        if (list != null) {
            for (MatHang mh : list) {
                model.addRow(new Object[]{mh.getMaMH(), mh.getTenMH(), mh.getMaLH(), mh.getDonGia(), mh.getDonVi(), mh.getSoLuong(), mh.getHang(), mh.getNgaySanXuat(), mh.getMaKe(), mh.getSLHong()});
            }
        }
    }

    private void prev() {
        if (row > 0) {
            row--;
            edit();
        }
    }

    private void first() {
        if (row != 0) {
            row = 0;
            edit();
        }
    }

    private void last() {
        row = tblMatHang.getRowCount() - 1;
        edit();
    }

    private void next() {
        row++;
        edit();
    }

    private void edit() {
        try {
            String mamh = String.valueOf(tblMatHang.getValueAt(row, 0));
            MatHang mh = dao.selectById(mamh);
            setForm(mh);
            tabs.setSelectedIndex(1);
            updateStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadCbbKho() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbKho.getModel();
        model.removeAllElements();
        List<Kho> list = khodao.selectAll();
        for (Kho k : list) {
            model.addElement(k);
        }
    }

    private void loadCbbDV() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbDonVi.getModel();
        model.removeAllElements();
        String[] dv = {"m3", "viên", "cái", "cây", "KG"};
        model.addElement("m3");
        model.addElement("viên");
        model.addElement("cái");
        model.addElement("cây");
        model.addElement("KG");
    }

    private void loadCbbLoaiHang() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbTenLH.getModel();
        List<LoaiHang> list = lhdao.selectAll();
        model.removeAllElements();
        for (LoaiHang lh : list) {
            model.addElement(lh);
        }
    }

    private void loadCbbKe() {
        Kho k1 = new Kho();
        if (cbbKho.getItemCount() != 0) {
            if (cbbKho.getSelectedIndex() != -1) {
                k1 = (Kho) cbbKho.getSelectedItem();
            } else {
                return;
            }
        } else {
            return;
        }
        LoaiHang lh = lhdao.selectById(((Kho) cbbKho.getSelectedItem()).getMaLH());
        cbbTenLH.setSelectedItem(lh);
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbKe.getModel();
        model.removeAllElements();
        List<KeHang> list = kdao.selectByMaKho(k1.getMaKho());
        for (KeHang ke : list) {
            model.addElement(ke);
        }
    }

    private void importExcel() {
        DefaultTableModel model = (DefaultTableModel) tblMatHang.getModel();
        model.setRowCount(0);

        FileInputStream excelFIS = null;
        BufferedInputStream excelBIS = null;
        XSSFWorkbook excelImportWoorkBook = null;

        String currentDirectoryPath = "C:\\Users\\ADMIN\\Desktop\\";
        JFileChooser excelfileImport = new JFileChooser(currentDirectoryPath);

        FileNameExtensionFilter excelFilter = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xslm");
        excelfileImport.setFileFilter(excelFilter);
        int excelChooser = excelfileImport.showOpenDialog(this);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                File excelFile = excelfileImport.getSelectedFile();
                excelFIS = new FileInputStream(excelFile);
                excelBIS = new BufferedInputStream(excelFIS);
                excelImportWoorkBook = new XSSFWorkbook(excelBIS);
                XSSFSheet excelSheet = excelImportWoorkBook.getSheetAt(0);
                for (int i = 10; i < excelSheet.getLastRowNum(); i++) {
                    XSSFRow excelRow = excelSheet.getRow(i);
                    XSSFCell cell0 = excelRow.getCell(0);
                    XSSFCell cell1 = excelRow.getCell(1);
                    XSSFCell cell2 = excelRow.getCell(2);
                    XSSFCell cell3 = excelRow.getCell(3);
                    XSSFCell cell4 = excelRow.getCell(4);
                    XSSFCell cell5 = excelRow.getCell(5);
                    XSSFCell cell6 = excelRow.getCell(6);
                    XSSFCell cell7 = excelRow.getCell(7);
                    XSSFCell cell8 = excelRow.getCell(8);
                    XSSFCell cell9 = excelRow.getCell(9);
                    String MaMH = cell0 + "";
                    String TenMH = cell1 + "";
                    String MaLH = cell2 + "";
                    String DonGia = cell3 + "";
                    String DVT = cell4 + "";
                    double SL = Double.parseDouble(cell5 + "");
                    String Hang = cell6 + "";
                    String ngaySX = cell7 + "";
                    String Ke = cell8 + "";
                    double SlHong = Double.parseDouble(cell9 + "");
                    MatHang mh = new MatHang();
                    mh.setMaMH(MaMH);
                    mh.setTenMH(TenMH);
                    mh.setMaLH(MaLH);
                    mh.setDonGia(Double.parseDouble(DonGia));
                    mh.setDonVi(DVT);
                    mh.setSoLuong(SL);
                    mh.setHang(Hang);
                    mh.setMaKe(Ke);
                    String[] tn = ngaySX.split("-");
                    java.sql.Date utilDate = new java.sql.Date(Integer.parseInt(tn[2]), Integer.parseInt(tn[1]), Integer.parseInt(tn[0]));
                    mh.setNgaySanXuat(utilDate);
                    mh.setSLHong(SlHong);
                    dao.insert(mh);
                    lstMH.add(mh);
                    model.addRow(new Object[]{cell0, cell1, cell2, cell3, cell4, cell5, cell6, cell7, cell8, cell9});
                }
                MsgBox.alert(this, "Import thành công");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
                // Logger.getLogger(ImportDataExcel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    private String check(String btn) {
        String err = "";
        if (!checkTrung() && btn.equals("Them")) {
            err += "Mã mặt hàng  trùng ";
        } else {
            if (CheckData.isNull(txtMaMH.getText()) && btn.equals("Them")) {
                err += "Mã mặt hàng không được để trống\n";
            }
            if (CheckData.isNull(txtTenMatHang.getText())) {
                err += "Tên mặt hàng không được để trống\n";
            }
            if (CheckData.isNull(txtHang.getText())) {
                err += "Hãng không được để trống\n";
            }
            if (CheckData.isNull(txtNgaySX.getText())) {
                err += "Ngày sản xuất không được để trống\n";
            } else {
                if (!CheckData.checkNgay(txtNgaySX.getText())) {
                    err += "Ngày sản suất sai định dạng\n";
                }
            }
            if (CheckData.isNull(txtDonGia.getText())) {
                err += "Đơn giá không được để trống\n";
            } else {
                if (!CheckData.isDouble(txtDonGia.getText())) {
                    err += "Đơn giá sai định dạng\n";
                }
            }
        }
        return err;
    }

    private boolean checkTrung() {
        MatHang h = dao.selectById(txtMaMH.getText());
        if (h == null) {
            return true;
        } else {
            return false;
        }
    }

    private void openLast() {
        trang = 1;
        Kho k = (Kho) cbbKho.getSelectedItem();
        String maK = k.getMaKho();

        Filltop5MH(trang, maK);
        lblTrang.setText("1");
        lblSotrang.setText("1 / " + soTrang);
    }

    private void openPrev() {
        if (trang > 1) {
            trang--;
            Kho k = (Kho) cbbKho.getSelectedItem();
            String maK = k.getMaKho();
            Filltop5MH(trang, maK);
            lblTrang.setText("" + trang);
            lblSotrang.setText(trang + "/" + soTrang);
        }
    }

    private void openNext() {
        if (trang < soTrang) {
            trang++;
            Kho k = (Kho) cbbKho.getSelectedItem();
            String maK = k.getMaKho();
            Filltop5MH(trang, maK);
            lblTrang.setText("" + trang);
            lblSotrang.setText(trang + "/" + soTrang);
        }
    }

    private void openFirst() {
        trang = soTrang;
        Kho k = (Kho) cbbKho.getSelectedItem();
        String maK = k.getMaKho();
        Filltop5MH(trang, maK);
        lblTrang.setText("" + soTrang);
        lblSotrang.setText(soTrang + "/" + soTrang);
    }

    private void updateSoTrang() {
        Kho k = (Kho) cbbKho.getSelectedItem();

        String maK = k.getMaKho();
        int a = dao.selectAllSoTrang(maK);
        if (a % 10 == 0) {
            soTrang = a / 10;
        } else {
            soTrang = a / 10 + 1;
        }
        trang = 1;
        Filltop5MH(trang, maK);
        lblSotrang.setText("1/" + soTrang);
        lblTrang.setText("1");
    }
}
